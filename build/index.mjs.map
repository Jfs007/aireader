{"version":3,"sources":["../node_modules/.pnpm/tsup@6.7.0_typescript@5.1.3/node_modules/tsup/assets/esm_shims.js","../src/utils/base.ts","../src/reader/reader.ts","../src/reader/text.ts","../src/reader/video.ts","../src/chatgpt/configuration.ts","../src/utils/http/fetch.ts","../src/chatgpt/service/openai-api.ts","../src/chatgpt/service/audio.ts","../src/utils/http/sse.ts","../src/utils/http/http.ts","../src/chatgpt/http/openai-sse.ts","../src/chatgpt/http/chatgpt-sse.ts","../src/chatgpt/service/chat-completions.ts","../src/chatgpt/service/embedding.ts","../src/chatgpt/service/chatgpt-chat.ts","../src/chatgpt/index.ts","../src/reader/index.ts","../src/midjourney/configuration.ts","../src/midjourney/service/midjourney-api.ts","../src/midjourney/service/channels.ts","../src/midjourney/service/interactions.ts","../src/midjourney/index.ts","../src/queue/center.ts","../src/queue/counter.ts","../src/queue/man.ts","../src/queue/index.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","\nimport EventEmitter from \"events\"\nimport { v4 } from 'uuid'\nexport default class Base {\n    uuid:string =  v4()\n    E: EventEmitter = new EventEmitter()\n    constructor(options: any = {}) {\n        // this.init(options)\n    }\n    init(options: any = {}) {\n        for (let key in options) {\n            this[key] = options[key];\n        }\n    }\n\n    on(name: string, listener: (...args: any[]) => any) {\n        this.E.on(name, listener)\n        return this;\n    }\n    emit(name:string, ...args: any[]) {\n        this.E.emit(name, ...args)\n        return this\n    }\n}","import { ReadStream } from 'fs';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport Base from \"src/utils/base\";\n\nclass Reader extends Base {\n    type: string = 'reader';\n    content: any = null;\n    file: ReadStream = null;\n    text:string = '';\n    agent: HttpsProxyAgent<any> = null;\n    constructor(options: Seed.Reader.Options) {\n        super(options)\n        super.init(options);\n    }\n    async toString(value?:any, value2?:any): Promise<any> {\n\n    }\n}\n\nexport default Reader","import Reader from \"./reader\";\n\nclass Text extends Reader {\n    type = \"text\";\n\n    constructor(options: Seed.Reader.Options) {\n        super(options)\n        super.init(options);\n        this.toString();\n    }\n    async toString() {\n        this.text = this.content;\n    }\n\n}\n\nexport default Text;","import Reader from \"./reader\";\nimport ffmpeg from 'fluent-ffmpeg';\nimport { v4 as uuidv4 } from 'uuid';\nimport fs from 'fs';\nimport Openai from \"src/chatgpt\";\n\nclass Video extends Reader {\n    type = \"video\";\n    openkey: string = '';\n    openai: Openai = null;\n    constructor(options: Seed.Reader.Options) {\n        super(options)\n        if (!options.openai) {\n            this.openai = new Openai({\n                agent: options.agent,\n                openkey: options.openkey\n            })\n        }\n        super.init(options);\n    }\n    async toString() {\n        return new Promise((resolve, reject) => {\n            let tmpFile = `${__dirname}/.tmp/${uuidv4()}.mp3`;\n            // 读取音频\n            ffmpeg(this.file).noVideo().on('end', async () => {\n                try {\n                    let response = await this.openai.Audio.transcriptions({\n                        file: fs.createReadStream(tmpFile)\n                    })\n                    this.text = response.data.text;\n                    console.log(this.text)\n                    resolve(response.data.text)\n                } catch (error) {\n                    reject('')\n                } finally {\n                    fs.unlinkSync(tmpFile)\n                }\n\n            }).output(tmpFile).run();\n\n        })\n    }\n\n\n}\n\nexport default Video;","import Base from \"src/utils/base\"\n\nclass Configuration extends Base {\n    openkey:Openai.Configuration[\"openkey\"]\n    agent?: Openai.Configuration[\"agent\"]\n    accessToken?: Openai.Configuration[\"accessToken\"]\n    constructor(options: Openai.Configuration) {\n        super(options)\n        super.init(options)\n    }\n\n    update(options: Openai.Configuration) {\n        super.init(options)\n        return this;\n    }\n\n\n}\n\nexport default Configuration","import fetch from 'node-fetch'\n/// <reference types=\"node\" />\n\nimport { RequestOptions } from 'http';\n\n// type AbortSignal = {\n//     readonly aborted: boolean;\n\n//     addEventListener: (type: 'abort', listener: (this: AbortSignal) => void) => void;\n//     removeEventListener: (type: 'abort', listener: (this: AbortSignal) => void) => void;\n// };\n\n// export type HeadersInit = Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>;\n\n\n// export interface RequestInit {\n//     /**\n//      * A BodyInit object or null to set request's body.\n//      */\n//     body?: BodyInit | null;\n//     /**\n//      * A Headers object, an object literal, or an array of two-item arrays to set request's headers.\n//      */\n//     headers?: HeadersInit;\n//     /**\n//      * A string to set request's method.\n//      */\n//     method?: string;\n//     /**\n//      * A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.\n//      */\n//     redirect?: RequestRedirect;\n//     /**\n//      * An AbortSignal to set request's signal.\n//      */\n//     signal?: AbortSignal | null;\n//     /**\n//      * A string whose value is a same-origin URL, \"about:client\", or the empty string, to set request’s referrer.\n//      */\n//     referrer?: string;\n//     /**\n//      * A referrer policy to set request’s referrerPolicy.\n//      */\n//     referrerPolicy?: ReferrerPolicy;\n\n//     // Node-fetch extensions to the whatwg/fetch spec\n//     agent?: RequestOptions['agent'] | ((parsedUrl: URL) => RequestOptions['agent']);\n//     compress?: boolean;\n//     counter?: number;\n//     follow?: number;\n//     hostname?: string;\n//     port?: number;\n//     protocol?: string;\n//     size?: number;\n//     highWaterMark?: number;\n//     insecureHTTPParser?: boolean;\n// }\n\n// export interface ResponseInit {\n//     headers?: HeadersInit;\n//     status?: number;\n//     statusText?: string;\n// }\n\n// export type BodyInit =\n//     | Blob\n//     | Buffer\n//     | URLSearchParams\n//     | FormData\n//     | NodeJS.ReadableStream\n//     | string;\n// class BodyMixin {\n//     constructor(body?: BodyInit, options?: { size?: number }) {};\n\n//     readonly body: NodeJS.ReadableStream | null;\n//     readonly bodyUsed: boolean;\n//     readonly size: number;\n\n//     /** @deprecated Use `body.arrayBuffer()` instead. */\n//     buffer():Promise<Buffer> {  return null };\n//     arrayBuffer(): Promise<ArrayBuffer> { return null };\n//     formData(): Promise<FormData> { return null };\n//     blob(): Promise<Blob> { return null };\n//     json(): Promise<unknown> { return null };\n//     text(): Promise<string> { return null };\n// }\n\n// // `Body` must not be exported as a class since it's not exported from the JavaScript code.\n// export interface Body extends Pick<BodyMixin, keyof BodyMixin> { }\n\n// export type RequestRedirect = 'error' | 'follow' | 'manual';\n// export type ReferrerPolicy = '' | 'no-referrer' | 'no-referrer-when-downgrade' | 'same-origin' | 'origin' | 'strict-origin' | 'origin-when-cross-origin' | 'strict-origin-when-cross-origin' | 'unsafe-url';\n// export type RequestInfo = string | Request;\n\n\n// type ResponseType = 'basic' | 'cors' | 'default' | 'error' | 'opaque' | 'opaqueredirect';\n\n// class Response extends BodyMixin {\n// \tconstructor(body?: BodyInit | null, init?: ResponseInit) {\n//         super()\n//     };\n\n// \treadonly headers: Headers;\n// \treadonly ok: boolean;\n// \treadonly redirected: boolean;\n// \treadonly status: number;\n// \treadonly statusText: string;\n// \treadonly type: ResponseType;\n// \treadonly url: string;\n// \tclone() {return null};\n\n// \tstatic error() {};\n// \tstatic redirect(url: string, status?: number) {};\n// \tstatic json (data: any, init?: ResponseInit): Response { return null };\n// }\n\n\n// export class AbortError extends Error {\n//     type: string;\n//     name: 'AbortError';\n//     [Symbol.toStringTag]: 'AbortError';\n// }\n\n\n\nexport default function Fetch(url, init) {\n    return fetch(url, init)\n}\n\n","\nimport Base from \"src/utils/base\"\nimport fetch from \"src/utils/http/fetch\"\nimport Configuration from \"../configuration\"\nclass OpenaiApi extends Base {\n    public api: string = 'https://api.openai.com/v1/'\n    public model: string = ''\n    configuration: Configuration = new Configuration({\n        openkey: ''\n    })\n    constructor(options: Configuration) {\n        super(options);\n        this.configuration = options;\n    }\n    get headers() {\n        return {\n            Authorization: `Bearer ${this.configuration.openkey}`,\n            'Content-Type': `application/json`,\n        } as any\n    }\n    fetch(url: string, options: Parameters<typeof fetch>[1]) {\n        options.agent = options.agent || this.configuration.agent\n        options.signal = options.signal\n        return fetch(url, options);\n    }\n\n    onPush(payload) {\n        this.E.emit('push', payload)\n        return this\n    }\n\n    onError(payload) {\n        this.E.emit('error', payload)\n        return this\n    }\n\n\n    onConnect(payload) {\n        this.E.emit('connect', payload)\n        return this\n    }\n\n    onClose(payload) {\n        this.E.emit('close', payload)\n        return this\n    }\n\n    onTimeout() {\n        this.E.emit('timeout', '')\n        return this\n    }\n\n}\n\nexport default OpenaiApi;","\nimport OpenAiApi from \"./openai-api\"\nimport FormData from 'form-data'\nclass Audio extends OpenAiApi {\n    public model: string = 'whisper-1'\n    constructor(configuration: ConstructorParameters<typeof OpenAiApi>[0]) {\n        super(configuration);\n    }\n    get headers() {\n        return {\n            Authorization: `Bearer ${this.configuration.openkey}`,\n            // 'Content-Type': `multipart/form-data`\n        }\n    }\n    async transcriptions(options: Openai.Audio.transcriptions) {\n        options.model = this.model || options.model;\n        const formData = new FormData()\n        Object.keys(options).map(key => {\n            let value = options[key];\n            formData.append(key, value);\n        })\n        try {\n\n            let response = await this.fetch(`${this.api}audio/transcriptions`, {\n                method: 'post',\n                body: formData,\n                headers: this.headers\n            })\n            if(response.status!=200) throw response\n            let body = await response.json()\n\n            return {\n                status: 200,\n                data: body\n            }\n        } catch (error) {\n            console.log(error, 46)\n            return error\n        }\n\n    }\n\n}\n\nexport default Audio;","\nimport fetch from './fetch'\nimport { createParser } from 'eventsource-parser'\nimport Http from './http';\nimport pTimeout from 'p-timeout'\n\n/**\n * \n * new HttpEventSource(\"http:0.0.0.0\").setProxy().start()\n * \n * \n */\nclass HttpEventSource extends Http {\n\n\tstreamTimeoutMs: number = 4 * 1000\n\tstreamTimer: any = null;\n\tconstructor(url: string) {\n\t\tsuper(url);\n\t}\n\n\tasync run() {\n\n\t\tclearTimeout(this.streamTimer);\n\t\tthis.streamTimer = null;\n\t\tsuper.setup()\n\t\ttry {\n\n\n\t\t\tlet decorateFetch = pTimeout(fetch(this.url, {\n\t\t\t\tmethod: 'post',\n\t\t\t\tagent: this.proxy,\n\t\t\t\theaders: this.headers,\n\t\t\t\t...this.options,\n\t\t\t\tbody: this.options.body || this.body,\n\t\t\t}), this.timeoutMs,\n\t\t\t\t() => {\n\t\t\t\t\tthis.response.status = 503\n\t\t\t\t\tthis.response.code = 503\n\t\t\t\t\tthis.response.message = 'TIMEOUT'\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// 执行延后，保证 throw timeout Error!\n\t\t\t\t\t\tthis.onTimeout()\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t\tthrow this.response\n\t\t\t\t}\n\t\t\t);\n\t\t\tconst res = await decorateFetch\n\t\t\tconst parser = createParser((event) => {\n\t\t\t\tif (event.type == 'event') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.onPush(event.data)\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tconst Timeout = () => {\n\t\t\t\tthis.streamTimer = setTimeout(() => {\n\t\t\t\t\t// 如果请求已被终止就不执行超时\n\t\t\t\t\tif (this.signal && this.signal.aborted) {\n\t\t\t\t\t\tthis.resetStreamTimer();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.onTimeout();\n\t\t\t\t}, this.streamTimeoutMs)\n\t\t\t}\n\n\t\t\t// feed超时判定\n\n\t\t\tconst feed = (chunk: string) => {\n\t\t\t\tclearTimeout(this.streamTimer)\n\t\t\t\tthis.streamTimer = null;\n\t\t\t\tTimeout();\n\t\t\t\tparser.feed(chunk)\n\t\t\t}\n\t\t\tthis.response = {\n\t\t\t\tmessage: res.statusText,\n\t\t\t\tstatus: res.status,\n\t\t\t}\n\t\t\tthis.__responseResolve && this.__responseResolve(res);\n\t\t\t\n\t\t\tif (res.status == 200) {\n\t\t\t\tlet body = res.body;\n\t\t\t\tbody.on('readable', () => {\n\t\t\t\t\tlet chunk: string | Buffer | null = body.read()\n\t\t\t\t\twhile (chunk) {\n\t\t\t\t\t\tfeed(chunk.toString())\n\t\t\t\t\t\tchunk = body.read();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tthis.onConnect(res);\n\t\t\t} else {\n\t\t\t\tthis.response.type = 'ERROR'\n\t\t\t\tthis.onError(this.response);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.resetStreamTimer();\n\t\t\tthis.response = {\n\t\t\t\ttype: 'ERROR',\n\t\t\t\tstatus: error.code || 500,\n\t\t\t\tmessage: error.message || error.statusText\n\t\t\t}\n\t\t\tthis.onError(this.response);\n\n\t\t}\n\t\treturn this.response;\n\n\t}\n\tresetStreamTimer() {\n\t\tclearTimeout(this.streamTimer)\n\t\tthis.streamTimer = null;\n\t}\n\n\tonClose(payload: any, type?: string) {\n\t\tthis.resetStreamTimer()\n\t\tsuper.onClose(payload, type)\n\t\treturn this\n\t}\n\tonError(payload: any, type?: string): this {\n\t\tthis.resetStreamTimer()\n\t\tsuper.onError(payload, type);\n\t\treturn this;\n\t}\n\n\tonConnect(payload: any, type?: string): this {\n\t\tthis.resetStreamTimer()\n\t\tsuper.onConnect(payload, type);\n\t\treturn this\n\t}\n\n\tonTimeout(payload?: any, type?: string): this {\n\t\tsuper.onTimeout(payload, type);\n\t\treturn this\n\t}\n\n\n\n}\n\n\n\n\n\n\n\nexport default HttpEventSource\n","\nimport fetch from './fetch'\nimport EventEmitter from \"events\"\nimport Base from '../base'\nimport { HttpsProxyAgent } from \"https-proxy-agent\"\nimport pTimeout from 'p-timeout'\n/**\n * \n * new HttpEventSource(\"http:0.0.0.0\").setProxy().start()\n * \n * \n */\nclass Http extends Base {\n    url: string = ''\n    uid: string = ''\n    __inEnd = false\n    __stage = ''\n    proxy: HttpsProxyAgent<any> = null;\n    headers: any = {\n        'Content-Type': 'application/json'\n    }\n\n    signal: AbortSignal = null\n\n    body: any = {}\n\n    timeoutMs: number = 15 * 1000\n\n    options: Parameters<typeof fetch>[1] = {}\n\n    __responseResolve: Function = null;\n    __responseHandle: Function = async (res) => res.json();\n    response: any = {\n\n    };\n\n\n\n    constructor(url: string) {\n        super()\n        this.url = url\n    }\n\n    setHid(id) {\n        this.uid = id\n        return this\n    }\n\n    setProxy(proxy: HttpsProxyAgent<any>) {\n        this.proxy = proxy\n        return this\n    }\n\n    setHeaders(headers) {\n        this.headers = Object.assign(this.headers, headers)\n        return this\n    }\n\n    setSignal(signal) {\n        this.signal = signal\n        return this\n    }\n\n    setUrl(url) {\n        this.url = url\n        return this\n    }\n\n    setBody(body) {\n        this.body = body;\n        return this\n    }\n\n    setOptions(options) {\n        this.options = options\n        return this\n    }\n\n    setTimeoutMs(timeoutMs) {\n        this.timeoutMs = timeoutMs\n        return this\n    }\n\n\n    setResponse(handle: Function) {\n        this.__responseHandle = handle\n    }\n\n\n    setup() {\n        this.__inEnd = false;\n\n    }\n\n    async run() {\n        try {\n            this.setup();\n\n            let decorateFetch = pTimeout(fetch(this.url, {\n                method: 'post',\n                agent: this.proxy,\n                headers: this.headers,\n                ...this.options,\n                body: this.options.body || this.body,\n            }),\n                this.timeoutMs,\n                () => {\n                    this.response.status = 503\n                    this.response.code = 503\n                    this.response.message = 'TIMEOUT'\n                    try {\n                        // 执行延后，保证 throw timeout Error!\n\n                        this.onTimeout()\n                    } catch (error) {\n\n                        // ignore\n                    }\n                    throw this.response\n                }\n\n            )\n\n            const res = await decorateFetch;\n\n            this.response = {\n                message: res.statusText,\n                status: res.status,\n\n            }\n\n            this.__responseResolve && this.__responseResolve(res);\n            \n            if (res.status == 200) {\n                let body = null;\n                try {\n                    body = await this.__responseHandle(res)\n                } catch (error) {\n                    // console.log(error, 'body')\n                } finally {\n                    this.onClose(body);\n                }\n\n\n\n            } else {\n\n                this.response.type = 'ERROR'\n                this.onError(this.response);\n            }\n        } catch (error) {\n\n            this.response = {\n                type: 'ERROR',\n                status: error.code || 500,\n                message: error.message || error.statusText\n            }\n            this.onError(this.response);\n\n        } finally {\n            return this.response;\n        }\n\n    }\n\n\n\n    responseBody() {\n        return new Promise((resolve) => {\n            this.__responseResolve = resolve;\n        })\n    }\n\n\n    onPush(payload, type?: string) {\n        if (this.__inEnd) return this\n        this.emit('push', payload, type)\n        return this\n    }\n\n    onError(payload, type?: string) {\n        if (this.__inEnd) return this;\n        this.__inEnd = true;\n        this.emit('error', payload, type)\n        return this\n    }\n\n\n    onConnect(payload, type?: string) {\n        this.emit('connect', payload, type)\n        return this\n    }\n\n    onClose(payload, type?: string) {\n        if (this.__inEnd) return this;\n        this.__inEnd = true;\n        this.emit('close', payload, type)\n        return this\n    }\n\n    onTimeout(payload?: string, type: string = 'TIMEOUT') {\n        if (this.__inEnd) return this;\n        this.__inEnd = true;\n        this.emit('timeout', payload, type)\n        return this\n    }\n\n\n}\n\n\n\n\n\n\n\nexport default Http\n","import HttpEventSource from '../../utils/http/sse';\n\n\nclass OpenaiHttpEventSource extends HttpEventSource {\n\n\n    constructor(url) {\n        super(url);\n    }\n\n    onPush(payload: any) {\n        let response:any = null;\n        try {\n            if(payload === '[DONE]') {\n                super.onClose(response);\n                return;\n            }\n            response = JSON.parse(payload);\n            super.onPush(response); \n        } catch (error) {\n            // super.onPush({}); \n        } finally {\n            return this;\n        }\n        \n    }\n\n}\n\nexport default OpenaiHttpEventSource","import HttpEventSource from '../../utils/http/sse';\n\n\nclass ChatgptHttpEventSource extends HttpEventSource {\n\n\n    constructor(url) {\n        super(url);\n    }\n\n    onPush(payload: any) {\n        let response: any = null;\n        try {\n            if (payload === '[DONE]') {\n                super.onClose(response);\n                return;\n            }\n            response = JSON.parse(payload || '{}');\n            response.choices = [{ delta: { content: response.message?.content?.parts[0] } }]\n            super.onPush(response);\n        } catch (error) {\n        } finally {\n            return this;\n        }\n\n    }\n\n}\n\nexport default ChatgptHttpEventSource","\nimport OpenAiApi from \"./openai-api\";\n\nimport { OpenaiHttpEventSource, Http } from '../http';\n\n\nclass ChatCompletions extends OpenAiApi {\n    public model: string = 'gpt-3.5-turbo'\n    constructor(configuration: ConstructorParameters<typeof OpenAiApi>[0]) {\n        super(configuration);\n    }\n    talk(options: Openai.ChatCompletions.talk, fetchOptions: any = {}) {\n        options.model = this.model || options.model;\n        let HttpController = options.stream ? OpenaiHttpEventSource : Http;\n        let sse = new HttpController(`${this.api}chat/completions`);\n        sse.setHeaders(this.headers);\n        sse.setProxy(this.configuration.agent);\n        sse.setSignal(fetchOptions?.signal);\n        sse.setBody(JSON.stringify(options));\n        sse.setOptions(fetchOptions);\n        sse.setTimeoutMs(200 * 1000)\n        return sse;\n    }\n\n\n\n\n\n\n\n\n}\n\nexport default ChatCompletions;","\nimport OpenAiApi from \"./openai-api\"\nclass Embedding extends OpenAiApi {\n    public model: string = 'text-embedding-ada-002'\n    constructor(configuration: ConstructorParameters<typeof OpenAiApi>[0]) {\n        super(configuration);\n    }\n    async create(options: Openai.Embedding.createApi) {\n        options.model = this.model || options.model;\n        try {\n            let response = await this.fetch(`${this.api}embeddings`, {\n                method: 'post',\n                body: JSON.stringify(options),\n                headers: this.headers\n            })\n            if(response.status!=200) throw response\n            let body = await response.json()\n            return {\n                status: response.status,\n                data: body\n            }\n        } catch (error) {\n            return error\n        }\n\n    }\n\n}\n\nexport default Embedding;","\nimport OpenAiApi from \"./openai-api\";\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ChatgptHttpEventSource, Http } from '../http';\n\n\nclass ChatgptChat extends OpenAiApi {\n    public model: string = 'text-davinci-002-render-sha'\n    public api: string = 'https://ai.fakeopen.com/'\n    get headers() {\n        return {\n            Authorization: `Bearer ${this.configuration.accessToken}`,\n            'Content-Type': `application/json`\n        } as any\n    }\n    constructor(configuration: ConstructorParameters<typeof OpenAiApi>[0]) {\n        super(configuration);\n    }\n    talk(options: Openai.ChatgptChat.talk, fetchOptions: any = {}) {\n        let stream:any = options.stream\n        if(stream === false) {\n            stream = false\n        }\n        let body = {\n            \"stream\": stream || false,\n            \"action\": \"next\",\n            \"conversation_id\": options.conversation_id || undefined,\n            \"messages\": options.messages.map(message => {\n                return {\n                    \"id\": message.message_id || uuidv4(),\n                    \"role\": message.role,\n                    \"author\": {\n                        \"role\": message.role,\n                    },\n                    \"content\": {\n                        \"content_type\": \"text\",\n                        \"parts\": [\n                            message.content\n                        ]\n                    }\n                }\n\n            }),\n            \"model\": this.model,\n            \"parent_message_id\": options.parent_message_id || uuidv4()\n        }\n        options.model = this.model || options.model;\n        let HttpController = options.stream ? ChatgptHttpEventSource : Http;\n        let sse = new HttpController(`${this.api}api/conversation`);\n        if(!options.stream) {\n            sse.setResponse(async res => {\n                let text = await res.text();\n                let answer = text.replace(/data\\: \\[DONE\\]/g, ' ').split('data: ').slice(-1)[0]\n                let r = JSON.parse(answer);\n                r.choices = [{ delta: { content: r.message?.content?.parts[0] } }]\n                return r;\n            })\n            sse.setTimeoutMs(200 * 1000)\n        }\n        sse.setHeaders(this.headers);\n        sse.setProxy(this.configuration.agent);\n        sse.setSignal(fetchOptions?.signal);\n        sse.setBody(JSON.stringify(body));\n        sse.setOptions(fetchOptions);\n        return sse;\n    }\n\n\n\n\n\n\n\n\n\n\n\n}\n\nexport default ChatgptChat;","\n\n\n\nimport Base from \"src/utils/base\";\nimport Configuration from \"./configuration\";\nimport Audio from \"./service/audio\";\nimport ChatCompletions from \"./service/chat-completions\";\nimport Embedding from \"./service/embedding\";\nimport ChatgptChat from \"./service/chatgpt-chat\";\n\n// import defaultLoader from \"src/utils/loader\";\n// let loader = new defaultLoader({\n//     dirname: __dirname + '/service',\n//     filter: [/.ts/, /^(?!openai-api\\.ts$)/]\n// }).run()\n\nconst modules = [Audio, ChatCompletions, Embedding, ChatgptChat]\n\n\n\n/**\n *  new Configuration({})\n *  \n *  new Openai()\n * \n */\n\n\nclass Openai extends Base {\n    Audio\n    ChatCompletions\n    Embedding\n    ChatgptChat\n    constructor(configuration: Openai.Configuration) {\n        let _config = new Configuration(configuration);\n        super(_config);\n        modules.map(module => {\n            this[module.name] = new module(_config)\n        })\n    }\n\n}\n\n// tOpenai = InstanceType<typeof Openai> & \n\nexport default Openai;","\nimport Base from \"../utils/base\";\nimport Text from \"./text\";\nimport Video from \"./video\";\nimport Openai from \"../chatgpt\";\n\nimport Keyv from 'keyv';\n\nimport { v4 } from 'uuid'\n\n\n/**\n * \n *  阅读器\n *  \n * \n * \n */\n\n\ninterface Field {\n    uuid: string\n    embed: []\n    answer: string\n    question: string\n}\n\n\n\nclass Seed extends Base {\n    plugins: any = {\n        Text,\n        Video\n    };\n    limited: number = 1000;\n    maxLimited: number = 1000;\n    contextPoint: number = 200;\n    packs: Array<any> = [];\n    chunks: Array<any> = [];\n    store: Keyv = new Keyv({ store: new Map() })\n    Openai: Openai = null;\n    readend: boolean = false;\n    constructor(options: Seed.Options) {\n        super(options)\n        let min = Math.min(this.maxLimited, options.limited || this.limited);\n        options.limited = min;\n        super.init(options);\n        this.Openai = new Openai({\n            openkey: options.openkey,\n            agent: options.agent\n        })\n    }\n    feed(data: Array<Text | Video | any>) {\n        this.readend = false;\n        this.packs.push(...data)\n        return this;\n    }\n    async chunked() {\n        let { limited, contextPoint } = this;\n\n        let chunks = [];\n        let seed = this;\n        let chunksPromise = this.packs.map(pack => {\n            async function chunkify() {\n                let aloneChunks = [];\n                await pack.toString();\n                if (pack.text.length <= limited) {\n                    chunks.push(pack.text);\n                } else {\n                    aloneChunks = seed.Cut(pack.text, limited, contextPoint);\n                    chunks.push(...aloneChunks);\n                }\n\n            }\n            return chunkify()\n        });\n        await Promise.all(chunksPromise);\n        this.chunks = chunks;\n        return this;\n    }\n\n    async summarize() {\n        console.log('启动阅读: bi～bi～bi～')\n        if (this.readend) {\n            console.log('阅读完成: bi～bi～bi～')\n            return;\n        }\n        let openai = this.Openai;\n        let l = this.chunks.length;\n        if (l <= 1) {\n            let uuid = v4();\n            this.store.set(uuid, {\n                question: '',\n                answer: this.chunks[0],\n                embed: [],\n                uuid\n            });\n            console.log('阅读完成: bi～bi～bi～')\n            this.readend = true;\n            return;\n        }\n        let num = 0;\n        let embeds: Array<Field> = [];\n        embeds = await Promise.all(this.chunks.map((text) => {\n            return new Promise<Field>(async (resolve) => {\n                let server = openai.ChatCompletions.talk({\n                    messages: [\n                        {\n                            role: 'user',\n                            content: `根据下面给出的内容，提取成关键词问题: ${text}`\n                        },\n                    ]\n                })\n                await server.run()\n                let content = server.response.data.choices[0].message.content;\n                let response = await openai.Embedding.create({\n                    input: content\n                })\n                let embed = response.data.data[0].embedding;\n                console.log(`问题已生成: ${content} `)\n                console.log(`阅读完成✅度: ${(num + 1) / l * 100}%`)\n                num++;\n                return resolve({\n                    embed,\n                    question: content,\n                    answer: text,\n                    uuid: v4()\n                })\n            })\n        }))\n        this.readend = true;\n        embeds.map(_ => {\n            this.store.set(_.uuid, _)\n        })\n    }\n\n    cosineSimilarity(embedA, embedB) {\n        let dot = 0;\n        let normA = 0;\n        let normB = 0;\n        for (let i = 0; i < embedA.length; i++) {\n            dot += embedA[i] * embedB[i];\n            normA += embedA[i] * embedA[i];\n            normB += embedB[i] * embedB[i];\n        }\n        normA = Math.sqrt(normA);\n        normB = Math.sqrt(normB);\n        return dot / (normA * normB);\n    }\n\n    max(arr) {\n        const maxIndex = arr.reduce((maxIndex, currentValue, currentIndex, array) => {\n            if (currentValue > array[maxIndex]) {\n                return currentIndex;\n            } else {\n                return maxIndex;\n            }\n        }, 0);\n        return maxIndex;\n    }\n\n    async question(options: any = {}) {\n        let response = await this.Openai.Embedding.create({\n            input: options.input,\n        })\n        let emb = response.data.data[0].embedding;\n        let simFragment = null;\n        for await (const [key, value] of this.store.iterator()) {\n            let sim = this.cosineSimilarity(emb, value.embed)\n            if (!simFragment || sim > simFragment.sim) {\n                value.sim = sim;\n                simFragment = value\n            }\n        };\n        let serve = this.Openai.ChatCompletions.talk({\n            messages: [\n                {\n                    role: 'assistant',\n                    content: `根据下面给出的描述，从中获取答案，并且扮演描述内容的ai助手，如果你的答案和下面描述无关只需要回复'No'不需要回复其余内容`\n                },\n                {\n                    role: 'assistant',\n                    content: options.desc || ''\n                },\n                {\n                    role: 'user',\n                    content: simFragment.answer\n                },\n                {\n                    role: 'user',\n                    content: options.input\n                }]\n        })\n        await serve.run()\n        return (serve.response.data.choices[0].message.content)\n\n    }\n\n    /**\n     * \n     * 切割字符串\n     * \n     * @param text \n     * @param limited \n     * @param contextPoint \n     * @returns \n     */\n\n    Cut(text, limited, contextPoint): Array<string> {\n        let str = '';\n        let chunks = [];\n        let strNum = 0;\n        let cacheLastContextPointStr = '';\n        for (let value of text) {\n            str = str + value; strNum++;\n            if (strNum >= (limited - contextPoint) + 1) {\n                cacheLastContextPointStr = cacheLastContextPointStr + value;\n            };\n            if ((strNum) === limited) {\n                chunks.push(str);\n                str = cacheLastContextPointStr; cacheLastContextPointStr = '';\n                strNum = contextPoint;\n            }\n        };\n        if (str && (str.length < limited) && (str.length > contextPoint)) { chunks.push(str) };\n        return chunks;\n\n    }\n\n}\n\nexport default Seed;","import Base from \"src/utils/base\"\n\nclass Configuration extends Base {\n\n    SERVER_ID: Midjourney.Configuration[\"SERVER_ID\"]\n    SALAI_TOKEN: Midjourney.Configuration[\"SALAI_TOKEN\"]\n    CHANNEL_ID: Midjourney.Configuration[\"SALAI_TOKEN\"]\n    agent?: Midjourney.Configuration[\"agent\"]\n    constructor(options: Midjourney.Configuration) {\n        super(options)\n        super.init(options)\n    }\n\n    update(options: Midjourney.Configuration) {\n        super.init(options)\n        return this;\n    }\n\n\n}\n\nexport default Configuration","\nimport Base from \"src/utils/base\"\nimport fetch from \"node-fetch\"\nimport Configuration from \"../configuration\"\nclass MidjourneyApi extends Base {\n    public api: string = 'https://discord.com/api/v9/'\n    public model: string = ''\n    configuration: Configuration = new Configuration({\n        SERVER_ID: '',\n        SALAI_TOKEN: '',\n        CHANNEL_ID: ''\n    })\n    constructor(options: Configuration) {\n        super(options);\n        this.configuration = options;\n    }\n    get headers() {\n        return {\n            authorization: `${this.configuration.SALAI_TOKEN}`,\n            'Content-Type': `application/json`,\n        } as any\n    }\n    fetch(url: string, options: Parameters<typeof fetch>[1]) {\n        options.agent = options.agent || this.configuration.agent\n        options.signal = options.signal\n        return fetch(url, options);\n    }\n    generateNumericNonce(length = 19) {\n        const characters = '0123456789';\n        let nonce = '';\n        for (let i = 0; i < length; i++) {\n            const randomIndex = Math.floor(Math.random() * characters.length);\n            nonce += characters.charAt(randomIndex);\n        }\n        return nonce;\n    }\n\n    onPush(payload) {\n        this.E.emit('push', payload)\n        return this\n    }\n\n    onError(payload) {\n        this.E.emit('error', payload)\n        return this\n    }\n\n\n    onConnect(payload) {\n        this.E.emit('connect', payload)\n        return this\n    }\n\n    onClose(payload) {\n        this.E.emit('close', payload)\n        return this\n    }\n\n    onTimeout() {\n        this.E.emit('timeout', '')\n        return this\n    }\n\n}\n\nexport default MidjourneyApi;","\nimport MidjourneyApi from \"./midjourney-api\"\nimport FormData from 'form-data'\nimport fs from 'fs'\nimport path from 'path';\nimport mime from 'mime';\n\n\n\n\nclass Channels extends MidjourneyApi {\n\n    constructor(configuration: ConstructorParameters<typeof MidjourneyApi>[0]) {\n        super(configuration);\n    }\n    async attachments(options) {\n        let filePath: string = options.filePath\n        let file = fs.readFileSync(filePath);\n        let file_size = file.length\n        let filename = path.basename(filePath)\n        let mimeType = mime.getType(filePath)\n        filename = `${options.id || this.generateNumericNonce()}_${filename}`\n        console.log()\n        \n        try {\n            let AttachmentResponse = await this.fetch(`${this.api}/channels/${this.configuration.CHANNEL_ID}/attachments`, {\n                method: 'post',\n                headers: this.headers,\n                body: JSON.stringify({ \"files\": [{ \"filename\": filename, \"file_size\": file_size, \"id\": options.attachments_id || \"0\" }] })\n            })\n            if (AttachmentResponse.status != 200) throw AttachmentResponse\n            let AttachmentResponseJson: any = await AttachmentResponse.json()\n            let { id, upload_url, upload_filename } = AttachmentResponseJson.attachments[0]\n            // 上传文件\n            await this.fetch(`${upload_url}`, {\n                method: 'put',\n                body: file,\n                headers: {\n                    'content-type': mimeType\n                }\n            })\n            return {\n                status: 200,\n                body: {\n                    filename,\n                    uploaded_filename: upload_filename,\n                    id,\n                }\n            }\n        } catch (error) {\n            return error\n        }\n\n\n    }\n\n\n\n    async sendMessage(options: Midjourney.Channels.sendMessage) {\n        try {\n\n            let bodyOptions = Object.assign({\n                \"channel_id\": \"\" + this.configuration.CHANNEL_ID,\n                \"nonce\": this.generateNumericNonce(),\n                \"type\": 0,\n                \"sticker_ids\": [],\n                \"attachments\": []\n            }, options)\n            // console.log(bodyOptions, 'bodyOptions')\n            let response = await this.fetch(`${this.api}/channels/${this.configuration.CHANNEL_ID}/messages`, {\n                method: 'post',\n                headers: this.headers,\n                body: JSON.stringify(bodyOptions)\n            })\n            if (response.status != 200) throw response\n            let body = await response.json()\n            return {\n                body,\n                status: 200\n            }\n\n        } catch (error) {\n            return error\n        }\n\n\n\n\n    }\n\n\n}\n\nexport default Channels;","import FormData from 'form-data'\nimport MidjourneyApi from \"./midjourney-api\"\nimport Channels from \"./channels\";\n\nclass Interactions extends MidjourneyApi {\n\n    constructor(configuration: ConstructorParameters<typeof MidjourneyApi>[0]) {\n        super(configuration);\n    }\n    async describe(options) {\n        try {\n            let channels = new Channels(this.configuration)\n            let response = await channels.attachments(options)\n            // channels.sendMessage({\n            //     attachments: [response.body]\n            // })\n\n            \n            // https://discord.com/api/webhooks/1112305836333735978/ckXJvKYqNlKNqwe0Rr-rz63Ny32205y2e-UCNU7zqmBgjbNqbAU_o_DLrBJkBBhmkRSm\n            response.body.id = options.id\n            let c_id = \"1092492867185950852\"\n            let reqid = this.generateNumericNonce()\n            let payload_json = {\n                id: reqid,\n                \"type\": 2,\n                \"application_id\": \"936929561302675456\",\n                \"guild_id\": this.configuration.SERVER_ID,\n                \"channel_id\": this.configuration.CHANNEL_ID,\n                \"session_id\": \"4701bfa0e1e25c7acb7fe1ec6b8daba7\",\n                // content: this.generateNumericNonce(),\n                attachments: [response.body],\n                \"data\": {\n                    \"version\": \"1092492867185950853\",\n                    \"id\": c_id,\n                    \"name\": \"describe\",\n                    \"type\": 1,\n                    \"options\": [\n                        { \"type\": 11, \"name\": \"image\", \"value\": 0 }\n                    ],\n                    \"application_command\": {\n                        \"id\": c_id,\n                        \"application_id\": \"936929561302675456\",\n                        \"version\": \"1092492867185950853\",\n                        \"default_member_permissions\": null,\n                        \"type\": 1,\n                        \"nsfw\": false,\n                        \"name\": \"describe\",\n                        \"description\": \"Writes a prompt based on your image.\",\n                        \"dm_permission\": true,\n                        \"contexts\": null,\n                        \"options\": [\n                            { \"type\": 11, \"name\": \"image\", \"description\": \"The image to describe\", \"required\": true }\n                        ]\n                    },\n                    \"attachments\": [response.body]\n                },\n                \"nonce\": reqid\n            }\n            let res = await this.fetch(`${this.api}interactions`, {\n                method: 'post',\n                body: JSON.stringify(payload_json),\n                headers: this.headers\n            })\n\n            let body = res.body;\n            body.on('readable', () => {\n                let chunk: string | Buffer | null = body.read()\n                while (chunk) {\n                    console.log(chunk.toString())\n\n                    chunk = body.read();\n                }\n            })\n            if (res.status === 200 || res.status === 204) {\n                return {\n                    status: res.status\n                }\n            }\n            throw res\n\n        } catch (error) {\n            return error\n\n        }\n\n    }\n\n\n}\n\nexport default Interactions;","\n\n\n\nimport Base from \"src/utils/base\";\nimport Configuration from \"./configuration\";\nimport Channels from \"./service/channels\";\nimport Interactions from './service/interactions'\n\n\nconst modules = [Channels, Interactions]\n\n\n/**\n *  new Configuration({})\n *  \n *  new Midjourney()\n * \n */\n\n\nclass Midjourney extends Base {\n    Channels\n    Interactions\n    constructor(configuration: Midjourney.Configuration) {\n        let _config = new Configuration(configuration);\n        super(_config);\n        modules.map(module => {\n            this[module.name] = new module(_config)\n        })\n    }\n\n}\n\n// Midjourney = InstanceType<typeof Openai> & \n\nexport default Midjourney;","\nimport Base from \"src/utils/base\";\nimport Counter from \"./counter\"\n\n\n\n\nclass Center extends Base {\n    counters: Array<Counter> = []\n    constructor() {\n        super()\n    }\n    getFastCounter(options?: {\n        cuid: string\n    }) {\n        let fastCounter: Counter = null;\n        this.counters.map(counter => {\n            if (options && options.cuid && options.cuid !== counter.cuid) {\n                return void 0\n            }\n            if (!fastCounter) fastCounter = counter;\n            if (counter.length < fastCounter.length) {\n                fastCounter = counter\n            }\n        })\n        return fastCounter\n    }\n    add(counter: Counter) {\n        this.counters.push(counter)\n        return this\n    }\n}\n\nexport default Center","import Base from \"src/utils/base\";\nimport Man from \"./man\"\n\n\n\n// D------  D---------- D---------- \n\n\nclass Counter extends Base {\n    name: string = '';\n    cuid: string = ''\n    mans: Array<Man> = []\n    info: any = {}\n    runMan: Man;\n    id: string\n    get length() {\n        let runManNum = this.runMan ? 1 : 0\n        return this.mans.length + runManNum\n    }\n\n    constructor(options = {}) {\n        super()\n        super.init(options)\n    }\n    sub(man: Man) {\n        man.__counter = this\n        this.mans.push(man)\n        if (this.runMan && this.runMan.receptioning) {\n            // 推送一下\n            this.notice();\n            return;\n        };\n        this.next();\n    }\n    unsub(man: Man) {\n        let index = this.mans.findIndex(m => man === m)\n        man.__counter = null\n        if (man === this.runMan) {\n            this.next();\n        } else {\n            this.mans.splice(index, 1);\n        }\n    }\n\n    next() {\n        if (this.runMan) {\n            this.runMan.doEnd()\n        }\n        this.runMan = this.mans.shift();\n        if (this.runMan) {\n            this.runMan.do(this)\n            this.notice();\n        }\n    }\n    notice() {\n        this.mans.map((man, i) => {\n            !man.receptioning && man.onMessage(this, {\n                length: this.mans.length,\n                wait: i\n            })\n        })\n\n\n    }\n\n\n\n\n\n\n\n\n\n\n}\n\n\nexport default Counter","import Counter from \"./counter\";\n\nimport Base from \"src/utils/base\";\n\n\n\n\nclass Man extends Base {\n    name: string\n    __serve: Function\n    __counter: Counter\n    __next: Function\n    receptioning: boolean = false\n    constructor(options: any = {}) {\n        super()\n        super.init(options)\n    }\n    onServe(__serve) {\n        this.__serve = __serve\n    }\n\n    serve(next): void {\n        this.__serve && this.__serve(next)\n    }\n\n    // 执行任务\n    async do(counter?: Counter) {\n        counter = this.__counter || counter\n        this.receptioning = true;\n        // next函数只允许执行一次\n        // 防止 开发者多次 next\n        let next: any = () => {\n            if (next.void) return;\n            counter.next.call(counter)\n            next.void = true;\n            // this.__next = null;\n        }\n        next.void = false;\n        this.__next = next;\n        this.serve(next)\n    }\n\n\n    next() {\n        this.__next && this.__next()\n    }\n\n    doEnd() {\n        this.receptioning = false;\n    }\n\n\n\n    onMessage(counter: Counter, info: any) {\n        // custom\n    }\n    // 离开当前队列或者结束当前服务\n    leave(counter?: Counter) {\n        this.receptioning = false;\n        (this.__counter || counter).unsub(this);\n    }\n\n\n}\n\n\nexport default Man","import Center from \"./center\";\nimport Counter from \"./counter\";\nimport Man from \"./man\";\n\n\nexport default { Counter, Center, Man } "],"mappings":"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","names":["uuidv4","pTimeout","uuidv4","v4","maxIndex","reader_default","Configuration","configuration_default","fetch","configuration_default","fetch","fs","path","modules","configuration_default"]}